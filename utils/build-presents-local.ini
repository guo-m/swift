# A mixin that enables 'lightweight' assertions that don't slow down the
# compiler significantly.
[preset: mixin_lightweight_assertions]
assertions

# FIXME: This should be:
# no-assertions
# swift-assertions
# ... but our tests are expecting assertions to be either on or off everywhere.

# AST verifier slows down the compiler significantly.
swift-enable-ast-verifier=0

[preset: mixin_lightweight_assertions,no-stdlib-asserts]
mixin-preset=
    mixin_lightweight_assertions

no-swift-stdlib-assertions


[preset: mixin_buildbot_install_components_with_clang]
swift-install-components=compiler;clang-resource-dir-symlink;stdlib;sdk-overlay;parser-lib;toolchain-tools;license;sourcekit-xpc-service;swift-remote-mirror;swift-remote-mirror-headers
llvm-install-components=llvm-cov;llvm-profdata;IndexStore;clang;clang-resource-headers;compiler-rt;clangd;dsymutil
#===------------------------------------------------------------------------===#
# OS X Package Builders
#===------------------------------------------------------------------------===#
[preset: mixin_osx_package_base]
mixin-preset=mixin_buildbot_install_components_with_clang
ios
; tvos
; watchos

; lldb
llbuild
swiftpm
swift-driver
swiftsyntax
skstresstester
swiftevolve
playgroundsupport
libcxx
indexstore-db
sourcekit-lsp

# Don't generate the SwiftSyntax gyb files. Instead verify that up-to-date ones
# are checked in.
swiftsyntax-verify-generated-files

# Build with debug info, this allows us to symbolicate crashes from
# production builds.
release-debuginfo
compiler-vendor=apple

# Cross compile for Apple Silicon
cross-compile-hosts=macosx-arm64

; lldb-no-debugserver
; lldb-use-system-debugserver
; lldb-build-type=Release
verbose-build
build-ninja
build-swift-stdlib-unittest-extra

# When building for an Xcode toolchain, don't copy the Swift Resource/ directory
# into the LLDB.framework. LLDB.framework will be installed alongside a Swift
# compiler, so LLDB should use its resource directory directly.
# Also, to reduce the size of the final toolchain, limit debug info to be
# line-tables only.
extra-cmake-options=
   -DLLDB_FRAMEWORK_COPY_SWIFT_RESOURCES=0
   -DCMAKE_C_FLAGS="-gline-tables-only"
   -DCMAKE_CXX_FLAGS="-gline-tables-only"

install-llvm
install-swift
; install-lldb
install-llbuild
install-swiftpm
install-swift-driver
install-swiftsyntax
install-skstresstester
install-swiftevolve
install-playgroundsupport
install-libcxx
install-sourcekit-lsp

install-destdir=%(install_destdir)s

darwin-install-extract-symbols

# Path where debug symbols will be installed.
install-symroot=%(install_symroot)s

# Path where the compiler, the runtime and the standard libraries will be
# installed.
install-prefix=%(install_toolchain_dir)s/usr

# Executes the lit tests for the installable package that is created
# Assumes the swift-integration-tests repo is checked out

test-installable-package

# Make sure that we can build the benchmarks with swiftpm against the toolchain
toolchain-benchmarks

# If someone uses this for incremental builds, force reconfiguration.
reconfigure

# Path to the .tar.gz package we would create.
installable-package=%(installable_package)s

# Path to the .tar.gz symbols package
symbols-package=%(symbols_package)s

# Info.plist
darwin-toolchain-bundle-identifier=%(darwin_toolchain_bundle_identifier)s
darwin-toolchain-display-name=%(darwin_toolchain_display_name)s
darwin-toolchain-display-name-short=%(darwin_toolchain_display_name_short)s
darwin-toolchain-name=%(darwin_toolchain_xctoolchain_name)s
darwin-toolchain-version=%(darwin_toolchain_version)s
darwin-toolchain-alias=%(darwin_toolchain_alias)s
darwin-toolchain-require-use-os-runtime=0

; [preset: mixin_osx_package_test]
; build-subdir=buildbot_osx

; ios
; tvos
; watchos
; test
; validation-test
; long-test
; stress-test

; lldb-test-swift-only

; # Path to the .tar.gz package we would create.
; installable-package=%(installable_package)s

[preset: mixin_osx_package,use_os_runtime]:
darwin-toolchain-require-use-os-runtime=1

[preset: buildbot_osx_package]
mixin-preset=
    mixin_osx_package_base
    mixin_lightweight_assertions,no-stdlib-asserts


[preset: mixin_buildbot_osx_package,no_test]
skip-test-swift
skip-test-swiftpm
skip-test-swift-driver
skip-test-llbuild
skip-test-lldb
skip-test-cmark
skip-test-playgroundsupport
skip-test-swiftsyntax
skip-test-skstresstester
skip-test-swiftevolve
skip-build-lldb



# macOS package without test that when linked against uses the OS runtime
# instead of the toolchain runtime.
[preset: buildbot_osx_package,no_test,use_os_runtime]
mixin-preset=
    buildbot_osx_package
    mixin_buildbot_osx_package,no_test
    mixin_osx_package,use_os_runtime